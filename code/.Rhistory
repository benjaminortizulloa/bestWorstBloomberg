"raster", #geospatial package [Pixels/Raster]
"rgdal",  #geospatial package [everything important]
"sf"      #geospatial package [Shapes/Vector]
))
install.packages(c("dplyr", "igraph", "raster", "rgdal", "sf"))
install.packages(c("dplyr", "igraph", "raster", "rgdal", "sf"))
knitr::opts_chunk$set(echo = TRUE)
## CHANGE THIS URL ##
yourImgURL <- 'https://upload.wikimedia.org/wikipedia/commons/6/6e/Golde33443.jpg
'
#
# #If doing this on RSTUDIO Cloud, then you will need to upload the image to the environment
# #The connection between cloud to certain urls isn't solid
# yourImgURL <- './Golde33443.jpg'
yourImgRaster <- raster::brick(yourImgURL)
yourImgRaster
raster::plotRGB(yourImgRaster,
r = 1,
g = 2,
b = 3,
scale = 255 #this is typically 255, but might be different
)
knitr::opts_chunk$set(echo = TRUE)
svg('myFilledState.svg')
?svg
usa <- sf::read_sf('https://raw.githubusercontent.com/PublicaMundi/MappingAPI/master/data/geojson/us-states.json')
usa
myState <- 'District of Columbia' #DC isn't a state, so choose anything else
myColor <- '#000000' #black isn't the best fill colorf
usa %>%
dplyr::filter(name == myState) %>%
dplyr::select(geometry) %>%
plot(col = myColor)
library(magrittr)
myState <- 'District of Columbia' #DC isn't a state, so choose anything else
myColor <- '#000000' #black isn't the best fill colorf
usa %>%
dplyr::filter(name == myState) %>%
dplyr::select(geometry) %>%
plot(col = myColor)
install.packages('svglite')
?svglte::svglite
?svglite::svglite
# svg('myFilledState.svg')
svglite::svglite('svg_lite_myFilledState.svg')
usa %>%
dplyr::filter(name == myState) %>%
dplyr::select(geometry) %>%
plot(col = myColor)
dev.off()
getwd()
svg('myFilledState.svg')
# svglite::svglite('svg_lite_myFilledState.svg')
usa %>%
dplyr::filter(name == myState) %>%
dplyr::select(geometry) %>%
plot(col = myColor)
dev.off()
knitr::opts_chunk$set(echo = TRUE)
install.packages(c(
"dplyr",  #data munging package
"igraph", #network/graph exploration package
#  "magrittr", #syntactic sugar [should already be installed by dplyr and igraph]
"raster", #geospatial package [Pixels/Raster]
"rgdal",  #geospatial package [everything important]
"sf"      #geospatial package [Shapes/Vector]
))
install.packages('tibble')Â 
install.packages("tibble")
RPostgres::postgresHasDefault()
url_type <- Sys.getenv("RECON_URL_TYPE")
web = ifelse(url_type == 'dev', Sys.getenv("RECON_URL_DEV") ,Sys.getenv("RECON_URL_PROD"))
url <- Sys.getenv("GITHUB_AUTH_ACCESSTOKEN_URL")
id <- ifelse(url_type == 'dev', Sys.getenv("CLIENT_ID_DEV"), Sys.getenv("CLIENT_ID_PROD"))
secret <- ifelse(url_type == 'dev', Sys.getenv("CLIENT_SECRET_DEV"), Sys.getenv("CLIENT_SECRET_PROD"))
pg_auth <- Sys.getenv("PG_AUTH")
recon_secret <- Sys.getenv('RECON_SECRET')
knitr::opts_chunk$set(echo = TRUE)
## CHANGE THIS URL ##
yourImgURL <- 'https://upload.wikimedia.org/wikipedia/commons/6/6e/Golde33443.jpg'
# #If doing this on RSTUDIO Cloud, then you will need to upload the image to the environment
# #The connection between cloud to certain urls isn't solid
# yourImgURL <- './Golde33443.jpg'
yourImgRaster <- raster::brick(yourImgURL)
yourImgRaster
raster::plotRGB(yourImgRaster,
r = 1,
g = 2,
b = 3,
scale = 255 #this is typically 255, but might be different
)
yourImgURL <- 'https://upload.wikimedia.org/wikipedia/commons/6/6e/Golde33443.jpg'
yourImgRaster <- raster::brick(yourImgURL)
yourImgRaster
raster::plotRGB(yourImgRaster,
r = 1,
g = 2,
b = 3,
scale = 255 #this is typically 255, but might be different
)
yourImgRaster
rastera::plot(yourImgRaster[[1]])
raster::plot(yourImgRaster[[1]])
raster::plot(yourImgRaster[[1]])
raster::plot(yourImgRaster[[1]])
raster::plot(yourImgRaster[[2]])
raster::plot(yourImgRaster[[2]])
raster::plot(yourImgRaster[[3]])
raster::plot(yourImgRaster[[1]])
raster::plot(yourImgRaster[[2]])
raster::plot(yourImgRaster[[1]])
raster::plot(yourImgRaster[[2]])
raster::plot(yourImgRaster[[3]])
classByAlpha <- c(
"Ally Balan",
"Peter Buley",
"Angie Elkins",
"Jes Garshell",
"Rick Greene",
"Caitlyn Hale",
"Kate Henke",
"Corey March",
"Parker Mathias"
)
classByAlpha
sample(classByAlpha)
set.seed(4321); sample(classByAlpha)
as.numeric('0123')
set.seed(as.numeric("035844757")); sample(classByAlpha)
iris
head(iris)
head(iris[,-1])
ls()
x = ''
ls
ls()
s = 1:5
y = 5:1
bind(s,y)
cbind(s,y)
coerce(s,y)
x = head(iris)
rownames(x)
row.names(x)
?row.names
NA/1
x = 1:6
x[-1]
xx <- as.Date('2018-10-01')
x
month(xx)
as.month(xx)
months(xx)
x <- c(12L, 6L)
median(x)
attr(median(x))
str(median(x))
f = data.frame(x = c(1,2,3))
y = data.frame(y = c('x', 'y', c''))
y = data.frame(y = c('x', 'y', 'c'))
merge(f,y)
v <- 1:3
names(v) <- c('a', 'b', 'c')
v[4] <- 4
names(v[4])
names(v)
x = data.frame(x = 1:5, y = 5:1)
cor.test(x$x, x$y)
x <- 5:8
names(x) <- letters[5:8]
x
indat <- c("Ash Rd", "Ash Cir", "Ash St")
indata
indata
indat
grepl("[Rd],[Ave], [Dr],[St]")
x = 1:5
y = 5:1
str(cbind(x,y))
list(1:5)
x =list(1:5)
cbind(x,x)
str(cbind(x,x))
dir('L:')
mkdir('L:/test/')
dir.create('L:/test')
write.csv(iris, 'L:/test/test.csv')
library(raster)
ls()
dir()
head(dir('work_projects/gait/Saved/MovieRenders/Production/City/Camera1/'))
head(dir('work_projects/gait/Saved/MovieRenders/Production/City/Camera1/Mask/'))
head(dir('work_projects/gait/Saved/MovieRenders/Production/City/Camera1/Mask/'))
head(dir('work_projects/gait/Saved/MovieRenders/Production/City/Camera1/Mask/', full.names = T))
x <- jpeg("work_projects/gait/Saved/MovieRenders/Production/City/Camera1/Mask/Camera1Sequence.0005.jpeg")
x
dev.off()
library('jpeg')
install.package('jpeg')
install.packages('jpeg')
x <- jpeg::readJPEG("work_projects/gait/Saved/MovieRenders/Production/City/Camera1/Mask/Camera1Sequence.0005.jpeg")
x
dim(x)
x[,,1]
table(x[,,1])
x <- raster::raster("work_projects/gait/Saved/MovieRenders/Production/City/Camera1/Mask/Camera1Sequence.0005.jpeg")
x
x <- jpeg::readJPEG("C:/Users/ortiz/Documents/work_projects/gait/Saved/MovieRenders/Production/City/Camera1/Mask/Camera1Sequence.0006.jpeg")
x
table(x[,,1])
?jpeg::readJPEG
x <- jpeg::readJPEG("C:/Users/ortiz/Documents/work_projects/gait/Saved/MovieRenders/Production/City/Camera1/Mask/Camera1Sequence.0006.jpeg", T)
x
x[,,1]
x
setwd('Code/2022/demo_bloomberg_best/code/')
readr::read_csv('../data/ranks.csv')
ranks = readr::read_csv('../data/ranks.csv')
readra::read_csv("https://www.bloomberg.com/graphics/best-and-worst/data/ranks/co2-saved-by-bike-sharing-programs-us-cities.csv")
test = readr::read_csv("https://www.bloomberg.com/graphics/best-and-worst/data/ranks/co2-saved-by-bike-sharing-programs-us-cities.csv")
test
head(test, 15)
test = readLines("https://www.bloomberg.com/graphics/best-and-worst/data/ranks/co2-saved-by-bike-sharing-programs-us-cities.csv", )
test
#https://www.bloomberg.com/graphics/best-and-worst/data/ranks.csv
#https://www.bloomberg.com/graphics/best-and-worst/data/ranks/co2-saved-by-bike-sharing-programs-us-cities.csv
library(magrittr)
test %>% str::str_detect("^###")
test %>% stringR::str_detect("^###")
test %>% stringr::str_detect("^###")
which(stringr::str_detect(test, '^###'))
1:which(stringr::str_detect(test, '^###'))
1:(which(stringr::str_detect(test, '^###'))-1)
test[1:(which(stringr::str_detect(test, '^###'))-1)]
test[1:(which(stringr::str_detect(test, '^###'))-1)] %>%
paste(collapse = '\n')
test[1:(which(stringr::str_detect(test, '^###'))-1)] %>%
paste(collapse = '\n') %>%
readr::read_csv()
test[1:(which(stringr::str_detect(test, '^###'))-1)] %>%
paste(collapse = '\n') %>%
readr::read_csv(col_names = F)
readr::read_csv()
?readr::read_csv()
test[1:(which(stringr::str_detect(test, '^###'))-1)] %>%
paste(collapse = '\n') %>%
readr::read_csv(col_names = F, c) %>%
.[1:2]
test[1:(which(stringr::str_detect(test, '^###'))-1)] %>%
paste(collapse = '\n') %>%
readr::read_csv(col_names = F) %>%
.[1:2]
test[1:(which(stringr::str_detect(test, '^###'))-1)] %>%
paste(collapse = '\n') %>%
readr::read_csv(col_names = F) %>%
.[1:2] %>%
t()
test[1:(which(stringr::str_detect(test, '^###'))-1)] %>%
paste(collapse = '\n') %>%
readr::read_csv(col_names = F) %>%
.[1:2] %>%
as.matrix()
test[1:(which(stringr::str_detect(test, '^###'))-1)] %>%
paste(collapse = '\n') %>%
readr::read_csv(col_names = F) %>%
.[1:2] %>%
as.matrix()
test[1:(which(stringr::str_detect(test, '^###'))-1)] %>%
paste(collapse = '\n') %>%
readr::read_csv(col_names = F) %>%
.[1:2] %>%
as.matrix() %>%
t()
test[1:(which(stringr::str_detect(test, '^###'))-1)] %>%
paste(collapse = '\n') %>%
readr::read_csv(col_names = F) %>%
.[1:2] %>%
as.matrix() %>%
t() %>%
as.data.frame()
c(1:5)
letters[1:5]
x = 1:5
names(x) <- letters[1:5]
x
x['a']
test[1:(which(stringr::str_detect(test, '^###'))-1)] %>%
paste(collapse = '\n') %>%
readr::read_csv(col_names = F) %>%
.[1:2] %>%
{
x = .[[2]]
names(x) = .[[1]]
x
}
test2 <- test[1:(which(stringr::str_detect(test, '^###'))-1)] %>%
paste(collapse = '\n') %>%
readr::read_csv(col_names = F) %>%
.[1:2] %>%
{
x = .[[2]]
names(x) = .[[1]]
x
}
test2
test2 %>% tibble::as.tibble()
names(test2)
parseMeta <- function(txt){
x = test[1:(which(stringr::str_detect(txt, '^###'))-1)] %>%
paste(collapse = '\n') %>%
readr::read_csv(col_names = F) %>%
.[1:2]
y = x[[2]]
names(y) <- x[[1]]
return(y)
}
parseMeta(test)
list(x)
as.list(x)
parseMeta <- function(txt){
x = test[1:(which(stringr::str_detect(txt, '^###'))-1)] %>%
paste(collapse = '\n') %>%
readr::read_csv(col_names = F) %>%
.[1:2]
y = x[[2]]
names(y) <- x[[1]]
z <- as.list(y)
return(z)
}
parseMeta(test)
parseMeta(test) %>% as.data.frame()
parseMeta <- function(txt){
x = test[1:(which(stringr::str_detect(txt, '^###'))-1)] %>%
paste(collapse = '\n') %>%
readr::read_csv(col_names = F) %>%
.[1:2]
y = x[[2]]
names(y) <- x[[1]]
z <- as.list(y) %>%
as.data.frame()
return(z)
}
ranks
ranks[1,]
ranks[1,]$filename
ranks[1,]$filename %>%
paste0("https://www.bloomberg.com/graphics/best-and-worst/data/ranks/", .)
ranks[1,]$filename %>%
paste0("https://www.bloomberg.com/graphics/best-and-worst/data/ranks/", .) %>%
readLines()
ranks[1,]$filename %>%
paste0("https://www.bloomberg.com/graphics/best-and-worst/data/ranks/", .) %>%
readLines() %>%
parseMeta()
test
head(test, 9)
ranks[1,]$filename %>%
paste0("https://www.bloomberg.com/graphics/best-and-worst/data/ranks/", .) %>%
readLines() %>%
head(9)
ranks[1,]$filename %>%
paste0("https://www.bloomberg.com/graphics/best-and-worst/data/ranks/", .) %>%
readLines() %>%
head(10)
head(test, 9)
ranks[1,]$filename %>%
paste0("https://www.bloomberg.com/graphics/best-and-worst/data/ranks/", .) %>%
readLines() %>%
parseMeta()
ranks[1,]$filename
ranks[1,]$filename %>%
paste0("https://www.bloomberg.com/graphics/best-and-worst/data/ranks/", .) %>%
readLines() %>%
.[1:(which(stringr::str_detect(.), '^###')-1)]
ranks[1,]$filename %>%
paste0("https://www.bloomberg.com/graphics/best-and-worst/data/ranks/", .) %>%
readLines() %>%
.[1:(which(stringr::str_detect(., '^###'))-1)]
ranks[1,]$filename %>%
paste0("https://www.bloomberg.com/graphics/best-and-worst/data/ranks/", .) %>%
readLines() %>%
.[1:(which(stringr::str_detect(., '^###'))-1)] %>%
readr::read_csv()
ranks[1,]$filename %>%
paste0("https://www.bloomberg.com/graphics/best-and-worst/data/ranks/", .) %>%
readLines() %>%
.[1:(which(stringr::str_detect(., '^###'))-1)] %>%
readr::read_csv(col_names = F)
ranks[1,]$filename %>%
paste0("https://www.bloomberg.com/graphics/best-and-worst/data/ranks/", .) %>%
readLines() %>%
.[1:(which(stringr::str_detect(., '^###'))-1)] %>%
readr::read_csv(col_names = F) %>%
{
x = as.list(.[[2]])
names(x) <- .[[1]]
as.data.frame(x)
}
parseMeta <- function(txt){
txt[1:(which(stringr::str_detect(txt, '^###'))-1)] %>%
readr::read_csv(col_names = F) %>%
{
x = as.list(.[[2]])
names(x) <- .[[1]]
as.data.frame(x)
}
}
ranks[1,]$filename %>%
paste0("https://www.bloomberg.com/graphics/best-and-worst/data/ranks/", .) %>%
readLines() %>%
parseMeta()
ranks[1,]$filename %>%
paste0("https://www.bloomberg.com/graphics/best-and-worst/data/ranks/", .) %>%
readLines() %>%
cbind(ranks[1,], .)
ranks[1,]$filename %>%
paste0("https://www.bloomberg.com/graphics/best-and-worst/data/ranks/", .) %>%
readLines() %>%
parseMeta() %>%
cbind(ranks, .)
ranks[1,]$filename %>%
paste0("https://www.bloomberg.com/graphics/best-and-worst/data/ranks/", .) %>%
readLines() %>%
parseMeta() %>%
cbind(ranks[1,], .)
bestWorstExtraCT <- function(df_row){
metaCols <- paste0("https://www.bloomberg.com/graphics/best-and-worst/data/ranks/", df_row$filename) %>%
readLines() %>%
parseMeta()
cbind(df_row, metaCols)
}
ranks[1,]$filename %>%
bestWorstExtraCT()
bestWorstExtraCT(ranks[1,])
1:5 %>%
purrr::map(function(i){
bestWorstExtraCT(ranks[i,])
})
1:5 %>%
purrr::map(function(i){
bestWorstExtraCT(ranks[i,])
}) %>% dplyr::bind_rows()
purrr::map(head(ranks), print)
purrr::imap(head(ranks), print)
purrr::imap(head(ranks), function(i){print(i)})
purrr::map(function(i){
bestWorstExtraCT(ranks[i,])
}) %>%
do.call(cbind, .)
purrr::map(1:5, function(i){
bestWorstExtraCT(ranks[i,])
}) %>%
do.call(cbind, .)
purrr::map(1:5, function(i){
bestWorstExtraCT(ranks[i,])
}) %>%
do.call(rbind, .)
bestWorstData <- purrr::map(1:nrow(ranks), function(i){
bestWorstExtraCT(ranks[i,])
}) %>%
do.call(rbind, .)
bestWorstData
tail(bestWorstData)
readr::write_csv(bestWorstData, '../data/bestWorstData.csv')
bestWorstData
head(bestWorstData)
library(magrittr)
library(tidytext)
install.packages('tidytext')
ranks <- readr::read_csv('../data/bestWorstData.csv')
ranks
df <- tibble::tibble(
id = stringr::str_remove(ranks$filename, '.csv$')
)
df
head(ranks$overview)
ranks$methodology
df <- tibble::tibble(
filename = ranks$filename,
text = paste(ranks$title, ranks$subhead, ranks$overview, ranks$methodology)
)
df
file_words <- df %>%
tidytext::unnest_tokens(word, text) %>%
dplyr::count(filename, word, sort = T)
file_words
total_words <- file_words %>%
dplyr::group_by(filename) %>%
dplyr::summarise(total = sum(n))
total_words
gc()
rm(bestWorstData)
rm(testrm(Test2))
rm(x)
rm(test)
rem(test2)
gc()
file_words <- dplyr::left_join(file_words, total_words)
file_tf_idf <- file_words %>%
tidytext::bind_tf_idf(word, filename, n)
file_tf_idf
dplyr::arrange(file_tf_idf, tf_idf)
dplyr::arrange(file_tf_idf, desc(tf_idf))
file_dtm <- file_words %>%
tidytext::cast_dtm(filename, word, n)
install.packages(tm)
install.packages("tm")
file_dtm <- file_words %>%
tidytext::cast_dtm(filename, word, n)
file_dtm
topicmodels
install.packages('topicmodels')
